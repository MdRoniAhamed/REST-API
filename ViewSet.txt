																ViewSet:
														========================
Django REST framework allows you to combine the logic for a set of related views in a single class, called a ViewSet.

There are two main advantages of using a ViewSet over using a View class. 
* Repeated logic can be combined into a single class.
* By using routers, we no longer need to deal with wiring up the URL conf ourselves.

															ViewSet Class:
														========================

A ViewSet class is simply a type of class-based View, that does not provide any method handlers such as get() or post(), and instead provides actions such as list() and create().

* list() - Get All Records.
* retrieve() - Get single Record.
* create() - Create/Insert Record
* update() - Update Record Completely 
* partial_update() - Update Record Partially
* destroy() - Delete Record.

from rest_framework import viewsets 

During dispatch, the following attributes are available on the ViewSet:-

* basename - the base to use for the URL names that are created.
* action - the name of the current action(e.g., list, create).
* detail - boolean indicating if the current action is configured for a list or detail view.
* suffix - the display suffix for the viewset type - mirrors the detail attribute.
* name - the display name for the viewset. This argument is mutually exclusive to suffix.
* description - the display description for the individual view of a viewset.

														 ViewSet - URL config:
														========================

from django.urls import path, include
from api import views 
from rest_framework.router import DefaultRouter

router = DefaultRouter()  --> Createing Default Router Object

router.register('sudentapi', views.StudentViewSet, basename = 'student') --> Register StudentViewSet with Router 

urlpatterns = [
path(",include(router.urls)), 
] --> The Api URLs are now determined automatically by the router



															ViewSet example:
														========================

views.py ==> 


from django.shortcuts import render 
from .models import Product
from .serializers import ProductSerializer
from rest_framework import status
from rest_framework import viewsets 
from rest_framework.response import Response

class ProductViewSet(viewsets.ViewSet):

    def list(self, request):
        print("*************List***********")
        print("Basename: ", self.basename)
        print("Action: ", self.action)
        print("Detail: ", self.detail)
        print("Suffix: ", self.suffix)
        print("Name: ",self.name)
        print("Description: ", self.description)
        pro = Product.objects.all()
        serializer = ProductSerializer(pro, many = True)
        return Response(serializer.data)
    
    def retrieve(self, request, pk=None):
        print("*************List***********")
        print("Basename: ", self.basename)
        print("Action: ", self.action)
        print("Detail: ", self.detail)
        print("Suffix: ", self.suffix)
        print("Name: ",self.name)
        print("Description: ", self.description)
        if pk:
            pro = Product.objects.get(pk=pk)
            serializer = ProductSerializer(pro)
            return Response(serializer.data)
    
    def create(self, request):
        serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'msg':'Created!'}, status = status.HTTP_201_CREATED)
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)
    
    def update(self, request, pk):
        pro = Product.objects.get(pk=pk)
        serializer = ProductSerializer(pro, request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'msg':'Data updated successfully!'})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def partial_update(self, request, pk):
        pro = Product.objects.get(pk=pk)
        serializer = ProductSerializer(pro, request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({'msg':'Partial updated successfully!'})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    def destroy(self, request, pk):
        pro = Product.objects.get(pk=pk)
        pro.delete()
        return Response({'msg':'Data Deleted Successful!'})

        
        
    

urls.py ::==> 



from django.contrib import admin
from django.urls import path, include
from api import views
from rest_framework.routers import DefaultRouter

# Create Router Object
router = DefaultRouter()

# Register Router with ViewSet Class
router.register('product_api',views.ProductViewSet, basename='product')

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include(router.urls)),
]
