														 ModelViewSet Class:
														=====================

The MOdelViewSet class inherits from GenericAPIView and includes implementations for various actions, by mixing in the behavior of the various mixin classes.

The  actions provided by the MOdelViewSet class are list(), retrieve(), create(), update(), parttial_update(), and destroy(). You can use any of the standard attributes or method overrides provided by GenericAPIView 

class StudentViewSet(viewsets.ModelViewSet):
	queryset = Student.objects.all()
	serializer_class = StudentSerializer
	

															  Example:
														=====================

views.py ==> 


from django.shortcuts import render 
from .models import Product
from .serializers import ProductSerializer
from rest_framework import viewsets 


class ProductModelViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
	


urls.py ==> 


from django.contrib import admin
from django.urls import path,include
from api import views
from rest_framework.routers import DefaultRouter

router = DefaultRouter()

router.register('product_api',views.ProductModelViewSet , basename="product")

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include(router.urls)),
]


														 ReadOnlyModelViewSet Class:
														============================

The  ReadOnlyModelViewSet class also inherits from GenericAPIView. As with ModelViewSet only provides the 'read-only' actions, list() adn retrieve(). You can use any of the standard attributes and method overrides available to GenericAPIView. 

class StudentReadOnlyModelViewSet(viewsets.ReadOnlyModelViewSet):
	queryset = Student
	serializer_class = StudentSerializer
	

															  Example:
														=====================

views.py  ==> 

from .models import Product
from .serializers import ProductSerializer
from rest_framework import viewsets 

class ProductReadOnlyModelViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
	
	
	
urls.py  ==>


from django.contrib import admin
from django.urls import path,include
from api import views
from rest_framework.routers import DefaultRouter

router = DefaultRouter()

router.register('product_api',views.ProductReadOnlyModelViewSet , basename="product")

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include(router.urls)),
]
