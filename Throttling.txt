															Throttling:
															===========

Throttling is similar to permissions, in that it determines if a request should be authorized. Throttles indicate a temporary state, and are used to control the rate of requests that clients can make to an API.

Your API might have a restrictive throttle for unauthenticated requests, and a less restrictive throttle for authenticated requests. 

The default throttling policy  may be set globally, using the DEFAULT_THROTTLE_CLAASES and DEFAULT_THROTTLE_RATES settings. For Example:
=====================

REST_FRAMEWORK = {
	'DEFAULT_THROTTLE_CLAASES':[
		'rest_framework.throttling.AnonRateThrottle',
		'rest_framework.throttling.UserRateThrottle'
		],
		'DEFAULT_THROTTLE_RATES':{
		'anon':'100/day',
		'user':'1000/day'
		}
		}
		
Note:- The rate descriptions used in DEFAULT_THROTTLE_RATES may include second, minute, hour or day as teh throttle period.



													AnonRateThrottle:
													==================
The AnonRateThrottle will only ever throttle unauthenticated users. The IP address of the incoming request is used to generate a unique key to throttle against.

The allowed request rate is determined from one of the following (in order of preference).

The rate property on the class, which may be provided by overriding AnonRateThrottle andd setting the property.

The DEFAULT_THROTTLE_RATES['anon'] setting.

AnonRateThrottle is suitable if you want to restrict the rate of requests from unknown sources.


																UserRateThrottle:
																=================
																
The UserRateThrottle will throttle users to a given rate of requests across the API. The user id is used to generate a unique key to throttle against. The user id is used to generate a unique key to throttle against. Unauthenticated requests will fall back to using the IP addrress of teh incoming request to generate a unique key to throttle against.

The allowed request rate is determined from one of the following (in order of preference).

The rate property on the class, which may be provided by overriding UserRateThrottle and setting the property.

The DEFAULT_THROTTLE_RATES['user'] setting.

														ScopedRateThrottle:
														====================

The ScopedRateThrottle class can be used to restrict access to specific parts of the API. This throttle will only be applied if the view that is being accessed includes a throttle_scope property. The unique throttle key will then be formend by concatenating the "scope" of the request with the unique user id or IP address.

														Example:
														=========

views.py:
=========

from .models import Product
from .serializers import ProductSerializer
from rest_framework import viewsets 
from rest_framework.permissions import IsAuthenticatedOrReadOnly
from rest_framework.authentication import SessionAuthentication
from rest_framework.throttling import AnonRateThrottle, UserRateThrottle 
from .throttling import JackRateThrottle

class ProductModelViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    authentication_classes = [SessionAuthentication]
    permission_classes = [IsAuthenticatedOrReadOnly]
    throttle_classes = [JackRateThrottle, AnonRateThrottle,UserRateThrottle]
    

throttling.py :
===============

from rest_framework.throttling import UserRateThrottle

class JackRateThrottle(UserRateThrottle):
    scope = 'jack'
	
	
setting.py :
============

REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_RATES':{
        'anon':'2/day',
        'user':'5/hour',
        'jack':'3/minute'
    }
}

														Example:
														========
														
setting.py ==>


REST_FRAMEWORK={
    'DEFAULT_THROTTLE_RATES':{
        'viewpro':'5/hour',
        'modifypro':'2/day',
    }
}



views.py:
==========

from .models import Product 
from .serializers import ProductSerializer
from rest_framework.generics import ListAPIView, CreateAPIView, UpdateAPIView, RetrieveAPIView, DestroyAPIView
from rest_framework.throttling import ScopedRateThrottle



class ProductList(ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'viewpro'

class ProductCreate(CreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'modifypro'


class ProductUpdate(UpdateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'modifypro'

class ProductRetrieve(RetrieveAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'viewpro'

class ProductDestroy(DestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    throttle_classes = [ScopedRateThrottle]
    throttle_scope = 'modifypro'
